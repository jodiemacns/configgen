/******************************************************************************
    * Copyright (C) by Enginuity Inc. - All Rights Reserved
    * Unauthorized copying of this file, via any medium is strictly prohibited
    * Proprietary and confidential
    * Written by __USER
******************************************************************************/

/**
  ******************************************************************************
  * @file    comms.c
  * project
  * @author  __USER
  * @version V0.1
  * @date    __DATE
  * @brief
  ******************************************************************************
  * @attention
  *
  * (C) Copyright 2019 Enginuity Inc.
  ******************************************************************************
  *
*/
#define COMMS_C

//******************************************************************************
// Includes
#include <stdint.h>
#include <stdbool.h>
#include "FreeRTOS.h"
#include "comms.h"

//******************************************************************************
// typedef and enums

//******************************************************************************
// Variables used by the comms
typedef struct
{
    char          *myName;
    QueueHandle_t myQ;
    int8_t        myId;
    bool          busy;

} _comms_t;

//******************************************************************************
// Module variables.
static _comms_t comms =
{
    .busy = 0,
    .myQ  = NULL,
    .myId = -1
};

// ***************************************************************************
/**
 * @brief Handles the comms.
 * @param vParam Passed in paramater.
**/
// ***************************************************************************
void comms_task(void *vParam)
{
    _resp_msg_t   msg;

    comms.myName = (char *)vParam;
    comms.myQ    = get_q_by_name(comms.myName);
    comms.myId   = get_id_by_name(comms.myName);

    dbg_printf("Starting !!! %s\n", comms.myName);

    while(1)
    {
        if(xQueueReceive(comms.myQ,&msg,5000))
        {
            dbg_printf("-%s message:\nid:      %x\nparam 0: %x\nparam 1: %x\nparam_16:%x\n",
               comms.myName,
               msg.id,
               msg.param[0],
               msg.param[1],
               msg.param_16);
               // Handle the Received Message.
               switch(msg.id)
               {
                   case 1:
                       // Respond back to the requesting task
                       msg.param_16 = 0;
                       msg.to = msg.from;
                       msg.from = comms.myId;
                       xQueueSend(gvQueueTask[msg.to], &msg,10);
                       break;
                   default:
                       break;
               }

        }else{
           dbg_printf("%s got nothing\n", comms.myName);
        }
    }
}

