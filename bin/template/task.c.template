/******************************************************************************
    * Copyright (C) by Enginuity Inc. - All Rights Reserved
    * Unauthorized copying of this file, via any medium is strictly prohibited
    * Proprietary and confidential
    * Written by __USER
******************************************************************************/

/**
  ******************************************************************************
  * @file    comms.c
  * project
  * @author  __USER
  * @version V0.1
  * @date    __DATE
  * @brief
  ******************************************************************************
  * @attention
  *
  * (C) Copyright 2019 Enginuity Inc.
  ******************************************************************************
  *
*/
#define COMMS_C

//******************************************************************************
// Includes
#include <stdint.h>
#include <stdbool.h>
#include "FreeRTOS.h"
#include "queue.h"
#include "utils.h"
#include "tstring.h"
#include "app_tasks.h"
#include "comms.h"

//******************************************************************************
// typedef and enums

//******************************************************************************
//! Variables used by the comms
typedef struct
{
    uint8_t buffer; // module buffer
} _comms_t;

//******************************************************************************
// Module variables.
//static _comms_t comms =
//{
//};

// ***************************************************************************
/**
 * @brief Handles the comms.
 * @param vParam Passed in paramater.
**/
// ***************************************************************************
void comms_task(void *vParam)
{
    _resp_msg_t   msg;

    dbg_printf("Starting !!! %s\n", MY_TASK_NAME);

    while(1)
    {
        if(xQueueReceive(MY_QUEUE, &msg, 5000))
        {
            // Handle the Received Message.
            switch(msg.id)
            {
                case QMSG_TICK:
                    // Respond with tock back to the requesting task.
                    msg.id = QMSG_TOCK;
                    write_queue_from(msg.from, msg.from, msg.from, msg.param_16);
                    break;
                default:
                    break;
            }
        }else{
           dbg_printf("%s got nothing\n", MY_TASK_NAME);
        }
    }
    return;
}

